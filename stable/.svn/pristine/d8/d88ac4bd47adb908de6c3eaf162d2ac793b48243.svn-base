#!/bin/bash

# Author: zhaobin@chinacache.com
# Function: /etc/init.d/fc
# History:
#     2013/06/13   zhaobin  create
#     2013/11/19  zhouchaoyong revise variable working scope

source /usr/local/squid/bin/functions
# useful global variable define
NO_ARGS=0
E_OPTERROR=85
E_CFGERROR=65
G_RET=0

REDIRECT="/usr/local/squid/bin/redirect"
RedirectConfFile="/usr/local/squid/etc/redirect.conf"
DETECTORIG="/usr/local/detectorig/sbin/detectorig"
DIGRUN="/usr/local/detectorig/sbin/digRun"
RedirectConfigErrorFile="/data/proclog/log/squid/redirectConfError.log"
DomainConfigErrorFile="/var/log/chinacache/detectorigConfigError.log"
OrigdomainConfigErrorFile="/var/log/chinacache/digRunConfigError.log"
FCConfigErrorFile="/data/proclog/log/squid/squidConfError.log"
TotalConfigErrorFile="/tmp/commonte.err"

WarningFile=/usr/local/squid/var/squid.conf.warn
WarningFileRedirect=/usr/local/squid/var/redirect.conf.warn
WarningFileDetectorig=/usr/local/squid/var/domain.conf.warn
WarningFileDigRun=/usr/local/squid/var/origdomain.conf.warn

ConfFile=/usr/local/squid/etc/squid.conf
RedirectStatus=`[ -f $ConfFile ] && sed -e 's/#.*//g' $ConfFile | egrep "(redirect_program)|(url_rewrite_program)"`

######################### functions ##########################

# brief:
#     show usage infomation
# params:
#     null
# return:
#     null
usage ()
{
    echo "Usage: /etc/init.d/fc     {start|switch|stop|status|reload|restart|rotate|swaplog|createdir|purgeall|kill}"
    echo "    start                start fc in single mode"
    echo "    start single         start fc in single mode"
    echo "    start multiple       start fc in multiple mode"
    echo "    switch single        switch fc to single mode"
    echo "    switch multiple      switch fc to multiple mode"
    echo "    restart              restart fc"
    echo "    status               show fc running status"
    echo "    reload               reload fc configure"
    echo "    rotate               rotate access.log"
    echo "    rotatelog            rotate flexicache log(only useful in multiple mode)"
    echo "    swaplog              rotate file swap.state under each cache_dir"
    echo "    createdir single     create cache directory for fc single mode"
    echo "    createdir multiple   create cache directory for fc multiple mode"
    echo "    purgeall             clear cache according to the fc running status"
    echo "                         if fc is NOT running,it will clear all cache both single and multiple"
    echo "    stop                 stop fc gracefully"
    echo "    kill                 force fc quit, direct kill process"
}

# brief:
#     switch fc running status
# params:
#     $1   [single|multiple]
# return:
#     0    success
#     1    failure
switchFC ()
{
    local ret
    
    getFCMode
    ret=$?

    if [ $ret -eq 1 ] && [ "$1" == "single" ]
    then
        echo "fc is running in single now, don't need to switch"
        return 0
    fi

    if [ $ret -eq 2 ] && [ "$1" == "multiple" ]
    then
        echo "fc is running in multiple now, don't need to switch"
        return 0
    fi

    # only fc that is running need to stop
    if [ $ret -ne 0 ]
    then
        stopFC
        ret=$?
        if [ $ret -ne 0 ]
        then
            echo "stop fc failure"
            return 1
        fi
    fi

    startFC $1
    ret=$?
    return $ret
}

# brief:
#     clear fc cache file
# params:
#     null
# return:
#     null
purgeall ()
{
    local ret
    local mode
    local num
    local dir
    local i
    
    getFCMode
    ret=$?

    # fc mode code to mode string
    if [ $ret -eq 1 ]
    then
        mode=single
    elif [ $ret -eq 2 ]
    then
        mode=multiple
    else
        mode="none"
    fi    
    
    # -1 both single and multiple cache should clear
    # 0 only single cache should clear
    # >0 multiple cache should clear
    num=$SQUID_NUM

    if [ "$mode" == "single" ]
    then
        num=0
    fi 
 
    # if fc is not running, we should clear all the cache both single and multiple
    if [ "$mode" == "none" ]
    then
        num=-1
    fi 

    # force stop FC 
    killFC
    ret=$?
    if [ $ret -ne 0 ]
    then
        exit 1
    fi

    for dir in $CACHE_SWAP
    do
        if [ $num -eq 0 ] || [ $num -eq -1 ]
        then
            echo '' > ${dir}swap.state
            chown squid:squid ${dir}swap.state
        elif [ $num -ne 0 ]
        then
            for ((i=1;i<=$SQUID_NUM;i++)) ; do
                echo '' > ${dir}squid${i}/swap.state
                chown squid:squid ${dir}squid${i}/swap.state
            done
        fi
    done

    if [ -e "/data/refresh_db" ]
    then
        rm -f /data/refresh_db/*
    fi
    
    if [ "$mode" != "none" ]
    then
        startFC $mode
        ret=$?
        exit $ret
    fi
    
    exit 0
}

# brief:
#     show fc running status
# params:
#     null
# return:
#     null
status ()
{
    local ret
    local mode
    local pid
    
    getFCMode
    ret=$?

    # fc mode code to mode string
    if [ $ret -eq 1 ]
    then
        mode=single
    elif [ $ret -eq 2 ]
    then
        mode=multiple
    else
        echo "not fc running copy"
        exit 1
    fi      
    
    if [ "$mode" == "single" ]
    then
        pid=$(pidof squid)
        echo "fc running in single mode"
        echo "squid (pid $pid) is running..."
    fi
    
    if [ "$mode" == "multiple" ]
    then
        echo "fc running in multiple mode"
        pid=$(pidof flexicache)
        ps --ppid $pid -p $pid -o pid=,comm= | awk '/squid/{print "fc-cache (pid "$1") is running...";next}/nginx/{print "fc-lscs (pid "$1") is running...";next}{print "flexicache (pid "$1") is running..."}'

    fi
    exit 0
}

# brief:
#     restart fc if fc is running
# params:
#     null
# return:
#     null
restart ()
{
    local ret
    local mode
    
    getFCMode
    ret=$?

    # fc mode code to mode string
    if [ $ret -eq 1 ]
    then
        mode=single
    elif [ $ret -eq 2 ]
    then
        mode=multiple
    else
        echo "not fc running copy"
        exit 1
    fi 

    stopFC
    ret=$?
    if [ $ret -ne 0 ]
    then
        echo "stop FC fail"
        exit $ret
    fi
    
    startFC $mode
    ret=$?
    if [ $ret -ne 0 ]
    then
        echo "start FC fail"
        exit $ret
    fi
}

# brief:
#     merge fc error log 
# params:
#     null
# return:
#     null
# TODO: 
mergefiles() {
	if [ -f $FCConfigErrorFile ]; then
		`cat $FCConfigErrorFile >> $TotalConfigErrorFile`
	fi
	if [ -f $RedirectConfigErrorFile ]; then
		`cat $RedirectConfigErrorFile >> $TotalConfigErrorFile`
	fi
	if [ -f $DomainConfigErrorFile ]; then
		`cat $DomainConfigErrorFile >> $TotalConfigErrorFile`
	fi
	if [ -f $OrigdomainConfigErrorFile ]; then
		`cat $OrigdomainConfigErrorFile >> $TotalConfigErrorFile`
	fi
}

# brief:
#     rm fc error log
# params:
#     null
# return:
#     null
# TODO: 
removefiles() {
	if [ -f $FCConfigErrorFile ]; then
		`rm -rf $FCConfigErrorFile`
	fi
	if [ -f $RedirectConfigErrorFile ]; then
		`rm -rf $RedirectConfigErrorFile`
	fi
	if [ -f $DomainConfigErrorFile ]; then
		`rm -rf $DomainConfigErrorFile`
	fi
	if [ -f $OrigdomainConfigErrorFile ]; then
		`rm -rf $OrigdomainConfigErrorFile`
	fi
	if [ -f $TotalConfigErrorFile ]; then
		`rm -rf $TotalConfigErrorFile`
	fi
	if [ -f $WarningFile ]; then
		`rm -rf $WarningFile`
	fi
	if [ -f $WarningFileRedirect ]; then
		`rm -rf $WarningFileRedirect`
	fi
	if [ -f $WarningFileDetectorig ]; then
		`rm -rf $WarningFileDetectorig`
	fi
	if [ -f $WarningFileDigRun ]; then
		`rm -rf $WarningFileDigRun`
	fi
}

# brief:
#     reload fc 
# params:
#     null
# return:
#     null
# TODO: should to restart billingd ?
reload ()
{
    local ret
    local mode

    removefiles
	
	$SQUID -k check 2>&1|tee $WarningFile 1>/dev/null
	Status=`test -r "$WarningFile"&&cat "$WarningFile"`
	if [[ ! -z "$Status" ]]; then
		echo "squid.conf:$Status\n"
	fi
	if [[ ! -z "$RedirectStatus" ]]; then
		$REDIRECT $RedirectConfFile check 2>&1 | tee $WarningFileRedirect 1>/dev/null
		StatusRedirect=`test -r "$WarningFileRedirect"&&cat "$WarningFileRedirect"`
		if [[ ! -z "$StatusRedirect" ]]; then
			echo "redirect.conf:$StatusRedirect\n"
	    fi
	fi

	$DETECTORIG -M check 2>&1 | tee $WarningFileDetectorig 1>/dev/null
	StatusDeterctorig=`test -r "$WarningFileDetectorig"&&cat "$WarningFileDetectorig"`
	if [[ ! -z "$StatusDeterctorig" ]]; then
		echo "domain.conf:$StatusDeterctorig\n"
	fi

	$DIGRUN -k check 2>&1|tee $WarningFileDigRun 1>/dev/null
	StatusDigRun=`test -r "$WarningFileDigRun"&&cat "$WarningFileDigRun"`
	if [[ ! -z "$StatusDigRun" ]]; then
		echo "origdomain.conf:$StatusDigRun\n"
	fi

	mergefiles

	#if [[ ! -z $Status ]]; then
	#	return 1;
	#fi
	#if [[ ! -z $StatusRedirect ]]; then
	#	return 1;
	#fi
	#echo "begin check redirect conf..."
	if [[ ! -z "$RedirectStatus" ]]; then
		$REDIRECT $RedirectConfFile check
		ret=$?
		if [ $ret -ne 0 ]
		then
			echo -n "check redirect confi done..."
			echo_failure
			return 1
		fi
	fi
    

    #echo "begin check squid conf..."
    $SQUID -k check
    ret=$?
    if [ $ret -ne 0 ]
    then
        echo -n "check squid conf done..."
        echo_failure 
        return 1
    fi 
    #echo -n "check squid conf done..."
    #echo_success

    getFCMode
    ret=$?

    # fc mode code to mode string
    if [ $ret -eq 1 ]
    then
        mode=single
    elif [ $ret -eq 2 ]
    then
        mode=multiple
    else
        echo "not fc running copy"
        exit 1
    fi     
    
    if [ "$mode" == "single" ]
    then
        #echo "check pid file..."
        checkPid
        ret=$?
        if [ $ret -ne 0 ]
        then
            echo -n "check pid file done ...."
            echo_failure 
            exit 1
        fi

        $SQUID -k reconfigure
        ret=$?
        #echo -n "reload done..."
        #[ $ret -eq 0 ] && echo_success || echo_failure 
        [ $ret -ne 0 ] && echo_failure  
    fi
    
    if [ "$mode" == "multiple" ]
    then
        LC_ALL=C /usr/local/squid/bin/lscsConfig
        $FC -k reconfigure
        ret=$?
        #echo -n "reload done..."
        #[ $ret -eq 0 ] && echo_success || echo_failure 
        [ $ret -ne 0 ] && echo_failure  
    fi

    exit $ret
}

# brief:
#     rotate fc 
# params:
#     null
# return:
#     null
rotate ()
{
    local ret
    local mode
    local cnt
    
    getFCMode
    ret=$?

    # fc mode code to mode string
    if [ $ret -eq 1 ]
    then
        mode=single
    elif [ $ret -eq 2 ]
    then
        mode=multiple
    else
        echo "not fc running copy"
        exit 1
    fi     
    
    if [ "$mode" == "single" ]
    then
        #echo "check pid file..."
        checkPid
        ret=$?
        if [ $ret -ne 0 ]
        then
            echo -n "check pid file done ...."
            echo_failure 
            exit 1
        fi

        $SQUID -k rotate
    fi        
    
    if [ "$mode" == "multiple" ]
    then
        cnt=1
        while [ $cnt -le $SQUID_NUM ]
        do
            $SQUID -k rotate -A $SQUID_NUM -a $cnt
            ((cnt++))
        done
    fi

    exit 0
}

# brief:
#     rotatelog fc (only use in multiple mode)
# params:
#     null
# return:
#     null
rotatelog ()
{
    local ret
    local mode
    
    getFCMode
    ret=$?

    # fc mode code to mode string
    if [ $ret -eq 1 ]
    then
        mode=single
    elif [ $ret -eq 2 ]
    then
        mode=multiple
    else
        mode=none
    fi 
    
    if [ "$mode" == "multiple" ]
    then
        $FC -k rotatelog
    else
        exit 1
    fi
    exit 0
}

# brief:
#     swaplog fc
# params:
#     null
# return:
#     null
swaplog ()
{
    local ret
    local mode
    local cnt
    
    getFCMode
    ret=$?

    # fc mode code to mode string
    if [ $ret -eq 1 ]
    then
        mode=single
    elif [ $ret -eq 2 ]
    then
        mode=multiple
    else
        mode=none
    fi 
    
    if [ "$mode" == "single" ]
    then
        #echo "check pid file..."
        checkPid
        ret=$?
        if [ $ret -ne 0 ]
        then
            echo -n "check pid file done ...."
            echo_failure 
            exit 1
        fi
        $SQUID -k swaplog
    fi 
    
    if [ "$mode" == "multiple" ]
    then
        cnt=1
        while [ $cnt -le $SQUID_NUM ]
        do
            $SQUID -F -D -A $SQUID_NUM -a $cnt -k swaplog
            ((cnt++))
        done
    fi

    exit 0
}

# brief:
#     force kill fc
# params:
#     null
# return:
#     null
killFC ()
{
    local ret
    local mode
    local pid
    local subPid
    local i
    
    getFCMode
    ret=$?

    # fc mode code to mode string
    if [ $ret -eq 1 ]
    then
        mode=single
    elif [ $ret -eq 2 ]
    then
        mode=multiple
    else
        mode=none
    fi 
    
    if [ "$mode" == "multiple" ]
    then
        pid=$(pidof flexicache)
        subPid=$(ps --ppid $pid -p $pid -o pid=,comm= | awk '!/flexicache/&&!/nginx/{printf "%s ", $1;}')
        kill -9 $pid 1>/dev/null 2>&1
        # kill lscs, DO NOT use kill -9 
        /usr/local/squid/bin/lscs/sbin/nginx -s stop
        for i in $subPid
        do
            kill -9 $i 1>/dev/null 2>&1
        done
    fi
    
    if [ "$mode" == "single" ]
    then
        pid=$(pidof squid)
        kill -9 $pid 1>/dev/null 2>&1
    fi
    
    # make sure kill squid
    pid=$(ps -ef | grep -v awk | awk '(/squid / || /squid) /) && !/service squid/ && !/init.d\/squid/{printf "%s ", $2}')
    for i in $pid
    do
        kill -9 $i 1>/dev/null 2>&1
    done
    
    return 0 
}

############################ main ############################
# Script invoked with no command-line args?
if [ $# -eq "$NO_ARGS" ]
then
    usage
    # Exit and explain usage.
    exit $E_OPTERROR
fi

case "$1" in
    start)
        if [[ -n "$2" ]] && [[ $2 != "single" && $2 != "multiple" ]]
        then
            usage
            exit 1
        elif [ -z "$2" ]
        then
            # e.g. service fc start
            startFC single
            G_RET=$?
            exit $G_RET
        else
            if [ ! -z "$3" ]
            then
                sed -ibak "s/cache_processes.*/cache_processes $3/" $FCConfFile
            fi
            # e.g. service fc start single
            # e.g. service fc start multiple
            
            startFC $2
            G_RET=$?
            exit $G_RET
        fi
        ;;
    stop)
        stopFC
        G_RET=$?
        exit $G_RET
        ;;
    switch)
        if [[ -z "$2" ]] || [[ $2 != "single" && $2 != "multiple" ]]
        then
            usage
            exit 1
        else
            switchFC $2
            G_RET=$?
            exit $G_RET
        fi
        ;;
    reload)
        reload;;
    rotate)
        rotate;;
    restart)
        restart;;
    status)
        status;;
    rotatelog)
        rotatelog;;
    createdir)
        if [[ -n "$2" ]] && [[ $2 != "single" && $2 != "multiple" ]]
        then
            usage
            exit 1
        elif [ -z "$2" ]
        then
            createdir single
            G_RET=$?
            exit $G_RET
        else
            createdir $2
            G_RET=$?
            exit $G_RET
        fi
        ;;
    swaplog)
        swaplog;;
    purgeall)
        purgeall;;
    kill)
        killFC
        G_RET=$?
        exit $G_RET
        ;;
    *)
        usage
esac
